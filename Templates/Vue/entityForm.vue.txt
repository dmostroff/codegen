<template>
  <form v-if="data" @submit.prevent="submit">
    <v-card outlined>
      <v-card-text>
	  {$textInputFields}
	  {$hasManyManager}
      </v-card-text>
      <v-card-actions>
        <loading-button :loading="sending" type="submit">{{ submitText }}</loading-button>
      </v-card-actions>
    </v-card>
  </form>
</template>

<script>
import LoadingButton from "@/Shared/LoadingButton";
import TextInput from "@/Shared/Form/TextInput";
import { mdiEye } from "@mdi/js";
import {$className} from "@/Models/{$className}/{$className}";
import firstOrNew from "@/Shared/mixins/first-or-new";
import * as fns from "@/helpers.js";

export default {
  name: "{$className}Form",
  components: { LoadingButton, TextInput},
  mixins: [firstOrNew],
  props: {
    errors: {
      type: Object,
      default: function() {
        return {};
      }
    }
  },
  computed: {
    // console: () => console,
    {$entityName}Fmt: function() {
    }
  },
  data() {
    return {
      data: null,
      sending: false,
      icons: {
        mdiEye
      },
    };
  },
  computed: {
    isEdit() {
      return location.href.includes("edit");
    },
    submitText() {
      return this.isEdit ? "Update {$className}" : "Create {$className}";
    }
  },
  mounted() {
    this.data = {
      name: this.{$entityName}.name
    };
  },
  methods: {
    async submit() {
      await {$className}.update({ id: this.{$entityName}.id, ...this.data });

      this.sending = true;

      let data = this.firstOrNew({$className}, []);
      console.log(data);

      if (!this.isEdit) {
        delete data.id;
      }

      if (this.isEdit) {
        await this.$http.update("{$entityName}s.update", this.{$entityName}.id, data);
      } else {
        await this.$http.store("{$entityName}s.store", data);
      }

      this.sending = false;
    }
  }
};
</script>
